two main components

PROGRAMMING LANGUAGE
java , php , golang , js , c++
- all the processing is done here
- mongoose is a library for js


A DATABASE
- mongo db , mySQL ,postgress , sqllite
-ORM , ODM : used to interact with the data base
- store the given data
- show the given data 

: backed can run on your device also
: data base is always on different component

: function runs in the backend 
    - mainly we are going to write funtions
    - asks db for stuff 
    - check if the stuff matchs with db

: going on a url causes a function to run
: send back the resoponse
: requests can come from anywhere


ESPRESS : routing 
MONGOOSE : used for Datbase

Data comming - 
File comming - video , audio...
Third Part API - google login... 

SRC DIRECTORY 
- production -- .env 


DIRECTORY STRUCTURE -- in general

index file/main file -- entry point for application
    - db is connected here
app file -- configuration 
    - cookie
    - and stuff like that
constant - when you have to restrict options


DB DIRECTORY
    - actuall code that connects to db
    - index file is here

MODELS
    - srtrucuture to find data
    - every libraray has differnt structure
    - mongoose , prsisma

CONTROLLERS
    - functions -- fancy name for functions

ROUTES 
    - defines the possible url and  for what of those to give error


MIDDLE WARE 

UTILS
    - utilites that we are going to have to use at a lot of places
    - eg mail sending
    - small functionality that are used everywhere 

Computer/Mobile makes a request
Server is always listening
    /home
    /login
    /search

EXPRESS does all this LISTENING
EXPRESS sends the Response

GET  req send by the browser

NPM INIT
    - intialized the intial file sturture
    - creates the package.json

SCRIPTS
    - intializing scripts helps on server

- express is a web framework
- there are two types of imports that can be used - there function is basically the same


- in express we mainly deal with response and request 
- then there are different methods for each req and response

- we can intiate a listener to a port and continue listening contiously
- we can listen to specific req on a port

.listen is used in general to start a server
.get is used to listen to  a specific request : on a specific port 


TAKING THIS APP TO PRODUCTION

we have to hide some stuff that is very senstive
- data base user name and password


IT CAN BE DEPLOYED ON VARIOUS THINGS
    - free tier was paid bacause the it was being used for crypto mining

DIGITAL OCEAN
HEROKU 
RAILWAY 
SEENODE
RENDER
CYCLIC.SH



EXPRESS - maily deals with req and resopnses 
    - req contains a lot of Data
    - we can send a json or text.. as a response

app.listem creates a live server that listens to all request continously other wise there it will just run ones and die out this prevents that form happening



BACKEND AND FORONT END CAN BE HOSTED TOGETHER
BACKEND CAN SERVE FRONT END BUT THAT IS A BAD PRACTISE
    - because you won't be able to make changes live

backend is made to listen to the requests that are going to come from the frontend
once it request the req it sends the responses but not in every case it has to make sure that it is a trusted source
then the front end has the access to the response which is prespecifed in the backend

PROXIES -- layer of security 


BACKEND

    - it can be served with both next.js and express.js
    - in case of express you have to host it seperately but in case of next.js don't have to host it speeprately 
    - next.js makes it simpiler but also locks you 

    - in next.js we can send the req and res directly by setting up of a folder named pages then pages then API
    - INSIDE OF THIS API PAGE EVERY .JS file is a api endpoint
    - then inside of that .js file we can setup the req and res things
    
    - while in express we we setup a simple file and insdide there we use express to setup the app 
    - then we make it live by using .listen on that app which causes it run contiously and listen to the request 
    - the we watch for get/-/-/ requests on a specific endpoint which we setup right there
    - we can setup this endpoint right there in the .GET
    - then whenever some one goes to this endpoint a specific request is made 
    - there we we initante a new funtion this funtion has inbuilt req and res 
    - req contains the request data from the user 
    - usin the res.json , req.send we send the data back then 


DATA MODELLNG 
    - have to make the stucture of the data first what feature will require what data 
    - what data will be taken from where

HELPER
    - prisma :: helps to store this data
    - mongoose :: helps in data mondeling 
    - connecting a db is different    

    MODELS FOLDER
- controller puts data in this models folder

- models are written as .models.js
- controllers are wirtten as .controller.js

- schema = constraints of the data/format/orginization 

        import mongoose from "mongoose";

        const userSchema =  new mongoose.Schema({})

        export const User = mongoose.model("user" , userSchema)

        - these three lines are always the same 

- mongoose gives the data a strucutre and requirent 

        type : string , 
        required : true ,
        unique : true,
        lowercase : true